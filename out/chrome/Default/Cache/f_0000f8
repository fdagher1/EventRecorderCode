
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head profile="http://gmpg.org/xfn/11">

	<title>Learning Angular 2: Exploring Reactive Form Classes and Validators &raquo; Thought Delimited</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<meta name="generator" content="Mango 1.5" />
	<meta name="description" content="A place for me to share my thoughts, my experiences, and my projects with other people." />
	<meta name="robots" content="index, follow" />
	
	<link rel="alternate" type="application/atom+xml" title="Atom" href="http://www.thoughtdelimited.org/thoughts/feeds/atom.cfm" />
	<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://www.thoughtdelimited.org/thoughts/feeds/rss.cfm" />	
	<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.thoughtdelimited.org/thoughts/api" />
	<link rel="stylesheet" type="text/css" href="/thoughts/skins/YosemiteGlossyBlue/assets/styles/main.css"  media="all" />
	<link rel="stylesheet" type="text/css" href="/thoughts/skins/YosemiteGlossyBlue/assets/styles/print.css" media="print" />
	<link rel="stylesheet" type="text/css" href="/thoughts/skins/YosemiteGlossyBlue/assets/styles/custom.css"  media="all" />
    
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/default.min.css">
	<style>
		#content { width: 950px; }
		div.post-title { width: 860px; margin-bottom: 4ex; }
		pre { font-size:120%; }
		
		div.post-title h2 { font-size:175%; }
		span.post-cat { font-size: 110%;}
		span.mini-add-comment { font-size: 110%; }
	</style>
	
	<script type="text/javascript" src="/thoughts/assets/plugins/jquery/js/jquery-1.3.2.min.js"></script>
	<!-- Tweet -->
	<link rel="stylesheet" type="text/css" href="/thoughts/components/plugins/user/tweet/assets/tweet.css">
	
	<script type="text/javascript" src="/thoughts/components/plugins/user/tweet/assets/jquery.tweet.js"></script>
	<script type="text/javascript">
		$(document).ready(function(){
			$(".tweet").tweet({
				loading_text: "Loading tweets...", 
				username: "bcswartz", 
				avatar_size: 32, 
				count: 3, 
				intro_text: "", 
				outro_text: "", 
				join_text: "", 
				auto_join_text_default: "i said,", 
				auto_join_text_ed: "i", 
				auto_join_text_ing: "i am", 
				auto_join_text_reply: "i replied to", 
				auto_join_text_url: "i am looking at", 
				query: ""
			});
		});
	</script>
					<script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
				
					 <script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>
				
</head>
<body>
<div id="page">
  <div id="header">
    <div id="headerimg">
	  <h1><a href="/thoughts/">Thought Delimited</a></h1>
	  <div class="description">Brian Swartzfager's personal blog</div>
	</div>

	<ul id="nav">
	  <li class="page_item"><a href="/thoughts/" title="Home">Home</a></li>
	  
		<li class="page_item"><a href="/thoughts/page.cfm/about-me-1" title="About Me">About Me</a></li>
		<li class="page_item"><a href="/thoughts/page.cfm/demos-downloads" title="Demos/Downloads">Demos/Downloads</a></li>
	</ul>
  </div>
  <!--/header -->
  <div id="content">
	<div class="post" id="post-87881FED-5056-B501-542801FC27476449">
	<div class="post-date"><span class="post-month">Oct</span> <span class="post-day">5<br /><span style="font-size:60%;">2016</span></span></div>
	<div class="post-title">
	  <h2><a href="/thoughts/post.cfm/learning-angular-2-exploring-reactive-form-classes-and-validators" rel="bookmark" title="Permanent Link to Learning Angular 2: Exploring Reactive Form Classes and Validators">Learning Angular 2: Exploring Reactive Form Classes and Validators</a></h2>
			<span class="post-cat"><a href="/thoughts/archives.cfm/category/angular-2" title="View all posts in  Angular 2" rel="category tag">Angular 2</a> , <a href="/thoughts/archives.cfm/category/angular-2-learning" title="View all posts in  Angular 2 Learning" rel="category tag">Angular 2 Learning</a> </span>  <span class="mini-add-comment"><a href="#respond">Add comments</a></span>
	</div>
	<div class="entry">
		<p><a rel="noopener noreferrer" href="https://github.com/bcswartz/angular2-sandbox-guildrunner/releases/tag/0.0.6" target="_blank">Version 0.0.6</a> of my sandbox <a rel="noopener noreferrer" href="https://github.com/bcswartz/angular2-sandbox-guildrunner" target="_blank">GuildRunner Angular 2 application</a> adds an example of using the reactive form and Validator classes provided by Angular 2.  The example was added to the sandbox collection of components rather than the main application, as I plan on taking what I learned from the exercise and expanding on it when I write the "real" forms.</p>
<p>In my <a rel="noopener noreferrer" href="/thoughts/post.cfm/learning-angular-2-experiment-in-validating-a-template-driven-forms" target="_blank">blog post regarding GuildRunner release 0.0.4</a>, which was my take on handling validation for Angular template-driven forms, I incorrectly stated that the other approach to forms supported by Angular 2 was referred to as "dynamic forms."  That's not the case:  the documentation page I was referring to was about how to dynamically generate form inputs for a collection of model data, which is a scenario where using the reactive form classes makes a lot of sense.  The documentation page that gave me the correct name to the alternative to template-driven forms - reactive forms - was the page on <a rel="noopener noreferrer" href="https://angular.io/docs/ts/latest/cookbook/form-validation.html" target="_blank">form validation</a>.</p>
<p>In the reactive form style, you do not bind your form controls to your model data.  Instead, you bind them to the reactive form classes, which are:</p>
<ul>
<li><a rel="noopener noreferrer" href="https://angular.io/docs/ts/latest/api/forms/index/FormGroup-class.html" target="_blank">FormGroup</a></li>
<li><a rel="noopener noreferrer" href="https://angular.io/docs/ts/latest/api/forms/index/FormArray-class.html" target="_blank">FormArray</a></li>
<li><a rel="noopener noreferrer" href="https://angular.io/docs/ts/latest/api/forms/index/FormControl-class.html" target="_blank">FormControl</a> (which inherits a majority of its methods from the <a rel="noopener noreferrer" href="https://angular.io/docs/ts/latest/api/forms/index/AbstractControl-class.html" target="_blank">AbstractControl</a> class) </li>
<li><a rel="noopener noreferrer" href="https://angular.io/docs/ts/latest/api/forms/index/FormBuilder-class.html" target="_blank">FormBuilder</a> (a convenience class for assembling a form using the other form classes)</li>
</ul>
<p>The most basic reactive form - a form with a single input - would be constructed with a single FormGroup containing a single FormControl for the form input.  So a reactive form containing a single text input (say a "name" field with an initial value of "Bob") would be coded in the component like so:</p>
<pre class="hljs"><code>
/*
Import the reactive form classes (your Angular module will also have to import the Angular ReactiveFormsModule)
*/
import {FormControl, FormGroup } from '@angular/forms';
...
export class MyReactiveFormComponent implements OnInit {
  myForm: FormGroup;
  
  ngOnInit() {
    this.myForm = new FormGroup( {
      'name': new FormControl( 'Bob' )
    } )
  }
</code></pre>
<p>...And the HTML template for the form would be written like so:</p>
<pre class="hljs"><code>
&lt;form [formGroup]="myForm"&gt;
  &lt;input type="text" formControlName="name"&gt;
&lt;/form&gt;
</code></pre>
<p>Note how the HTML form is connected to the FormGroup via the formGroup attribute, and how the text input is bound to the FormControl via the formControlName attribute:  ngModel is not in play here.</p>
<p>Form input validation is applied by adding validator functions to the FormControl: a FormControl takes either a single validator function or an array of validator functions as its second constructor argument.  Making the name input in our example required with a minimum length of 2 characters is a simple matter of adding the necessary validator functions shipped with Angular 2 within the <a rel="noopener noreferrer" href="https://angular.io/docs/ts/latest/api/forms/index/Validators-class.html" target="_blank">Validators</a> class:</p>
<pre class="hljs"><code>
  ngOnInit() {
    this.myForm = new FormGroup( {
      'name': new FormControl( 'Bob', [ Validators.required, Validators.minLength(2) ] )
    } )
  }
</code></pre>
<p>A validation check will occur anytime the value of the FormControl changes, whether that change is made via the UI or programmatically (which is an improvement over how the template-driven forms work).</p>
<p>A FormGroup can contain any number of FormControl objects.  It can also contain additional FormGroups (sub-groups within the main FormGroup) and FormArrays which hold a collection of unnamed, iterable FormControls.  A single validator function can be attached to each FormGroup and FormArray, usually a custom validator function that performs a validation based on multiple form values.</p>
<p>To try out these features, I created a form for updating certain properties of a Chapter domain class:</p>
<ul>
<li>A text input for updating the chapter name.</li>
<li>A select box for selecting the guild the chapter belongs to.</li>
<li>A radio button for setting whether or not the chapter was the head chapter for the guild.</li>
<li>A series of checkboxes representing the defense measures used at the chapter location, represented in the Chapter domain class an array of defense measure ID values.</li>
</ul>
<div>In the component, I created a single method (called in ngOnInit) for instantiating the reactive form classes and for subscribing to the change event emitter:</div>
<pre class="hljs"><code>
//sandbox/chapter-reactive-form/chapter-reactive-form.component.ts
import { Chapter } from "../../domain/chapter";
import { guilds } from "../../db/guilds";
import { defenseMeasures } from "../../db/defense-measures";

import {FormControl, FormGroup, FormArray, Validators, FormBuilder} from '@angular/forms';
...
export class ChapterReactiveFormComponent implements OnInit {

  chapter: Chapter;
  defenseArray: any = []; //Populated by ngOnInit with an array of defenses
  guildArray: any = []; //Populated by ngOnInit with an array of guilds
  defenseBoxArray: FormArray;
  form: FormGroup;
  ...
  constructor( private formBuilder: FormBuilder ) { }
  ...
  buildForm() {

    //Create a custom Validator function for the defenses array
    function hasDefenses( formArray: FormArray) {
      let valid = false;
      for( let c in formArray.controls ) {
        if( formArray.controls[c].value == true ) { valid = true }
      }
      return valid == true ? null : { noDefenses: true }
    }

    //Construct and populate the defenses FormArray outside of the FormBuilder so we can populate it dynamically
    this.defenseBoxArray = new FormArray( [], hasDefenses );
    for( let d in this.defenseArray ) {
      this.defenseBoxArray.push( new FormControl(( this.chapter.defenses.indexOf( this.defenseArray[d].id ) &gt; -1 )))
    }

    this.form = this.formBuilder.group( {
      'name': [ this.chapter.name, [
        Validators.required,
        Validators.minLength(4),
        Validators.pattern('[a-zA-Z]+')
      ] ],
      'guild': [ this.chapter.guildId, Validators.required ],
      'headChapter': [ this.chapter.headChapter, Validators.required ],
      'defenses': this.defenseBoxArray
    } );

    this.form.valueChanges
      .subscribe( data =&gt; this.checkFormValidity( data ) );
  }

</code></pre>
<p>The hasDefenses() function definition is an example of how to create a custom validator function, which should either return null if validation passed or return an object literal that provides some context for why the validation failed.  The function is then passed as the 2nd argument in the FormArray constructor.</p>
<p>The rest of the FormGroup representing the form is created using the FormBuilder, which provides a less verbose way to instantiating the other reactive form classes.  The final statement in the method subscribes to the valueChanges event emitted by the form anytime a form value is updated and ties that event to the execution of the checkFormValidity method which I'll touch on shortly.</p>
<p>The HTML form controls that bind to these reactive form elements looks like this:</p>
<pre class="hljs"><code>
&lt;-- sandbox/chapter-reactive-form/chapter-reactive-form.component.html --&gt;
&lt;form class="form-horizontal well well-sm" *ngIf="chapter" [formGroup]="form"&gt;
  ...
  &lt;input id="name" type="text" class="form-control" formControlName="name"&gt;
  ...
  &lt;select id="guild" class="form-control" formControlName="guild"&gt;
    &lt;option [selected]="form.controls.guild.value == null" value=""&gt;-- Select --&lt;/option&gt;
    &lt;option *ngFor="let g of guildArray" [selected]="g.id == guild" [value]="g.id"&gt;{{g.name}}&lt;/option&gt;
  &lt;/select&gt;
  ...
  &lt;input type="radio" formControlName="headChapter" name="headChapter" value="true" [checked]="form.controls.headChapter.value === true"&gt; Yes   
  &lt;input type="radio" formControlName="headChapter" name="headChapter" value="false" [checked]="form.controls.headChapter.value === false"&gt; No
  ...
  &lt;ul formArrayName="defenses"&gt; &lt;!-- Must set the formArrayName --&gt;
    &lt;li *ngFor="let def of form.controls.defenses.controls; let i = index"&gt;
      &lt;input type="checkbox" formControlName="{{i}}" &gt; {{defenseArray[i].label}}
    &lt;/li&gt;
  &lt;/ul&gt;
</code></pre>
<p>A few things worth pointing out:</p>
<ul>
<li>The "--Select--" option for the guild drop-down was something I added so that text was displayed in the select box when the current value was null.  The control would work fine without it.</li>
<li>Setting the "checked" attribute on the radio buttons based on the current headChapter form control state was necessary in order to show the initial value.</li>
<li>When a form control belongs to either a sub-FormGroup or a FormArray (as in this case), you need to use the formGroupName or formArrayName as an attribute in an HTML element that encloses the HTML elements bound to the FormControls within the FormGroup or FormArray.</li>
</ul>
<p>As mentioned earlier, a validator function returns an object literal with context information about the validation problem when validation fails.  Those object literals need to be translated into appropriate error messages to display to the user.  So in a similar fashion to what I did with my template-driven form, I had to provide some translations in my component as well as a collection of arrays to hold the translated error messages:</p>
<pre class="hljs"><code>
//sandbox/chapter-reactive-form/chapter-reactive-form.component.ts
  ...
  errMsgs: any = {
    name: [],
    guild: [],
    headChapter: [],
    defenses: []
  };

  translations: any = {
    name: {
      required: 'The name is required.',
      minlength: 'The name must be at least 4 characters long.',
      pattern: 'The name can only contain letters.'
    },
    guild: {
      required: 'Please select a guild.'
    },
    headChapter: {
      required: 'Please select either Yes or No.'
    },
    defenses: {
      noDefenses: 'The chapter must implement at least one defensive measure.'
    }
  };
</code></pre>
<p>Note how each translation block consists of the name of the form control and an object literal whose properties names match up with the object literal keys returned by the validator functions (including the one returned by my custom hasDefenses() function).</p>
<p>The checkFormValidity() function (executed when the form emits the event indicating a form value has changed) performs the work of examining the current validation errors generated by the reactive form controls and creating the proper user-appropriate error messages:</p>
<pre class="hljs"><code>
/sandbox/chapter-reactive-form/chapter-reactive-form.component.ts
  ...
  checkFormValidity( data?: any ){
    for( let k in this.errMsgs ) {
      this.errMsgs[k] = [];
      if( this.form.controls[k].errors &amp;&amp; this.form.controls[k].dirty ) {
        for( let e in this.form.controls[k].errors ) {
          if( this.translations[k][e] ) {
            this.errMsgs[k].push( this.translations[k][e] );
          }
        }
      }
    }
  }
</code></pre>
<p>Note that the validation error translation only occurs when the invalid form control is in a "dirty" state:  like template-driven form HTML elements, each form control has status values denoting if the form control is pristine or dirty, valid or invalid, and untouched or touched.  Preventing the users from seeing any validation errors when the control is pristine is desirable when you have a form that may initially be empty:  you don't want to display an error on a required field before the user has entered any data.  However, there is a drawback:  if you do change a form value programmatically, the change will trigger a validation check on the form control but it won't change the control state to dirty.  The workaround for that is to manually mark the field as dirty prior to changing the value, as demonstrated in this method:</p>
<pre class="hljs"><code>
changeName() {
  this.form.controls['name'].markAsDirty();
  this.form.controls['name'].setValue( '999' ); //invalid based on the [a-zA-Z]+ pattern validator
}
</code></pre>
<p>Flipping back to the HTML template, the user-appropriate error messages are displayed under the form controls like so:</p>
<pre class="hljs"><code>
&lt;div *ngIf="errMsgs.name.length" class="alert alert-danger"&gt;
  &lt;ul&gt;
    &lt;li *ngFor="let error of errMsgs.name"&gt;
      {{error}}
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>
<p>Another benefit to using the reactive form classes is that the FormGroup class comes with a reset() method that not only blanks/nulls out the targeted form control values, it also resets the form controls back to a pristine and untouched state.</p>
<p>The final piece of the puzzle was to write a submit method that would copy the form control values back to the Chapter object (I also coded the submit button to be disabled whenever the FormGroup representing the form was flagged as invalid):</p>
<pre class="hljs"><code>
  submitForm() {
    this.checkFormValidity()
    if( this.form.valid ) {
      this.chapter.name = this.form.value.name; //value is a key/value map
      this.chapter.guildId = +this.form.value.guild; //need this translated to number, hence +
      this.chapter.headChapter = this.form.value.headChapter === "true";
      this.chapter.defenses = [];
      for( let db in this.defenseBoxArray.controls ) {
        if( this.defenseBoxArray.controls[ db ].value == true ) {
          this.chapter.defenses.push( this.defenseArray[ db ].id )
        }
      }
    }
  }
</code></pre>
<p>I then added interpolations to the template that would display the state and raw error values of the form controls as well as the current Chapter model values so I could watch everything in action when using the form:</p>
<p><img src="/thoughts/assets/postContent/images/learningAngular2/guildRunner/chapterReactiveForm_600A.mov.gif" alt="" width="800" height="480" /></p>
<p>Some final notes:</p>
<ul>
<li>
<p>You may notice in the animated GIF of the form that the reset action did not clear the radio buttons.  That's due to the fact that I'm still using RC5: that bug was fixed in the official release of Angular 2.</p>
</li>
<li>
<p>Although you can supply a validator function as an argument when instantiating a new FormGroup, for some reason the FormBuilder syntax for creating a FormGroup does not allow you to provide a validator.  So if you need to add validation to a FormGroup object, instantiate the object ahead of time and then reference it in the FormBuilder construction (just like I did with my FormArray).</p>
</li>
</ul>
		<div class="entry-footer">
                    	<a href="http://twitter.com/share" class="twitter-share-button" data-count="horizontal"  >Tweet</a>
					 
                        	<g:plusone size="medium"></g:plusone>
                        </div>
	</div>
	
<!-- You can start editing here. -->

	
<!-- You can start editing here. -->
	<h3 id="comments">0 responses to &#8220;Learning Angular 2: Exploring Reactive Form Classes and Validators&#8221;</h3> 
	<ol class="commentlist">
		
</ol>

	<h3 id="respond">Leave a Reply</h3>
	
	
	<form method="post" action="#respond" id="commentform">
		<input type="hidden" name="action" value="addComment" />
		<input type="hidden" name="comment_post_id" value="87881FED-5056-B501-542801FC27476449" />
		<input type="hidden" name="comment_parent" value="" />
		<p><input type="text" name="comment_name" id="author" value="" size="22" />
<label for="author"><strong>Name</strong> (required)</label></p>
		<p><input type="text" name="comment_email" id="email" value="" size="22" />
<label for="email"><strong>Mail</strong> (will not be published) (required)</label></p>
		<p><input type="text" name="comment_website" id="url" value="" size="22"  />
<label for="url"><strong>Website</strong></label></p>
		<p><textarea name="comment_content" id="comment" cols="100%" rows="10" ></textarea></p>
		<p><input type="checkbox" id="subscribe" name="comment_subscribe" value="1" /> <label for="subscribe">Subscribe to this comment thread</label></p>
		<p>
					<img src="/thoughts/output.cfm?action=event&amp;event=displayLylaCaptcha&amp;hashReference=D51A7C0DFAF2BFFD6307FB9470388822411511DC" /><br />
					<label>Text you see in the picture: <br /><input name="captchaText" type="text" value="" /></label>
					<input name="HashReference" type="hidden" value="D51A7C0DFAF2BFFD6307FB9470388822411511DC" /><br /></p>
		<p><input name="submit" type="submit" id="submit" value="Submit Comment" />
</p>
</form>
			
	</div><!--/post -->
  </div><!--/content -->


<!--/sidebar -->  
  <div id="footer">

  <!--recent comments start -->
   <div class="footer-recent-posts">
    <h4>Recent Posts</h4>
	<ul> 
		<li><strong><a href="/thoughts/post.cfm/version-0-2-0-of-vadacl-released" rel="bookmark" title="Permanent link to Version 0.2.0 of vadacl Released">Version 0.2.0 of vadacl Released</a></strong><br />
	<small>12-30-2016</small>
	</li>
	
		<li><strong><a href="/thoughts/post.cfm/locale-based-message-support-added-to-vadacl" rel="bookmark" title="Permanent link to Locale-Based Message Support Added to vadacl">Locale-Based Message Support Added to vadacl</a></strong><br />
	<small>11-29-2016</small>
	</li>
	
		<li><strong><a href="/thoughts/post.cfm/learning-angular-2-implementing-my-vadacl-validation-library" rel="bookmark" title="Permanent link to Learning Angular 2: Implementing My vadacl Validation Library">Learning Angular 2: Implementing My vadacl Validation Library</a></strong><br />
	<small>11-8-2016</small>
	</li>
	
		<li><strong><a href="/thoughts/post.cfm/vadacl-a-library-for-streamlining-form-validation-in-angular-2" rel="bookmark" title="Permanent link to vadacl: A Library For Streamlining Form Validation in Angular 2">vadacl: A Library For Streamlining Form Validation in Angular 2</a></strong><br />
	<small>11-5-2016</small>
	</li>
	
		<li><strong><a href="/thoughts/post.cfm/learning-angular-2-exploring-reactive-form-classes-and-validators" rel="bookmark" title="Permanent link to Learning Angular 2: Exploring Reactive Form Classes and Validators">Learning Angular 2: Exploring Reactive Form Classes and Validators</a></strong><br />
	<small>10-5-2016</small>
	</li>
	
	</ul>
  </div>
  <!--recent comments start -->

  <!--recent comments start -->
  <div class="footer-recent-comments">
  <h4>Recent Comments</h4>
<ul>
	
	<li><strong><a href="/thoughts/post.cfm/overcoming-the-cookie-size-limit-when-using-jquery-datatables-and-saved-state#comment-0F60051A-5056-B501-546EE1868E431035" title="on ">CharlesDrunk</a></strong>: cool web site &amp;lt;a href=http://freemilf.net/&amp;gt;http://freemilf.net/&amp;lt;/a&amp;gt;</li>
	
	<li><strong><a href="/thoughts/post.cfm/intellij-2016-2-and-angular-2-support#comment-8296E84D-5056-B501-54FC9936610D9A07" title="on ">Stanislav</a></strong>: I prefr to use Codelobster for AngularJS:...</li>
	
	<li><strong><a href="/thoughts/post.cfm/adding-the-in-memory-web-api-to-an-systemjs-based-angular-cli-application#comment-48129BBA-5056-B501-54A8105AFBF7FD2F" title="on ">Frank</a></strong>: @Eric Beard you can just add the line:&amp;quot;angular-in-memory-web-api&amp;quot;:...</li>
	
	<li><strong><a href="/thoughts/post.cfm/vadacl-a-library-for-streamlining-form-validation-in-angular-2#comment-B55A5A85-5056-B501-54774D463B018FBB" title="on ">Brian Swartzfager</a></strong>: @Mike: I've addressed internationalization in the latest vadacl release (0.1.0).</li>
	
</ul></div>
  <!--recent comments end -->
  
	<!--about text start -->
	
    
    <div class="footer-about">
		<h4>About</h4>
		<p>A place for me to share my thoughts, my experiences, and my projects with other people.</p>
	</div>
    
	<!--about text end -->
	
  <hr class="clear" />

	<div id="credits">
		<div class="alignleft creditsTextBlock">
		Powered by <a href="http://www.mangoblog.org" title="Mango Blog - A ColdFusion blog engine">Mango Blog</a>. Design and <a href="http://www.ndesign-studio.com/stock-icons/">Icons</a> by <a href="http://www.ndesign-studio.com">N.Design Studio</a> (with modifications)
		</div>
		
		<div class="alignright rssTextBlock"><a href="http://www.thoughtdelimited.org/thoughts/feeds/rss.cfm" class="rss">RSS Feeds</a></div>
	</div>

	

  </div><!--/footer -->
</div><!--/page -->

<!--credits start -->

<!--credits end -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-9732459-1");
pageTracker._initData();
pageTracker._trackPageview();
</script>
				

<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/highlight.min.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</body>
</html>
