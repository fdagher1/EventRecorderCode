{"version":3,"sources":["webpack:///./src/app/events/service-eventdata.service.ts","webpack:///./src/app/service-auth.service.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/events/data-event.ts","webpack:///./src/app/events/event.module.ts","webpack:///./src/app/events/event.ts","webpack:///./src/app/events/eventdetail.component.ts","webpack:///./src/app/events/eventedit.component.ts","webpack:///./src/app/events/eventlist.component.ts","webpack:///./src/app/events/pipe-eventfilter.pipe.ts","webpack:///./src/app/shared/generic-validator.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/app/events/eventdetail.component.html","webpack:///./src/app/events/eventedit.component.html","webpack:///./src/app/events/eventlist.component.html"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/throw';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/observable/of';\r\n\r\nimport { IEvent} from './event';\r\n\r\n@Injectable()\r\nexport class ServiceEventData {\r\n    private baseUrl = 'api/events';\r\n\r\n    constructor(private http: Http) {\r\n    }\r\n\r\n    getEvents (): Observable<IEvent[]> {\r\n        return this.http.get(this.baseUrl)\r\n                .map(this.extractData)\r\n                .do(data => console.log('getEvents: ' + JSON.stringify(data)))\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    getEvent(id: number): Observable<IEvent> {\r\n        if (id ===0 ) {\r\n            return Observable.of(this.initializeEvent());\r\n\r\n        }\r\n\r\n        const url = `${this.baseUrl}/${id}`;\r\n        return this.http.get(url)\r\n                .map(this.extractData)\r\n                .do(data => console.log('getEvent: ' + JSON.stringify(data)))\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    deleteEvent(id: number): Observable<Response> {\r\n        let headers = new Headers({'Content-Type': 'application/json'});\r\n        let options = new RequestOptions({headers: headers});\r\n\r\n        const url = `${this.baseUrl}/${id}`;\r\n        return this.http.delete(url, options)\r\n                    .do(data => console.log('deleteEvent: ' + JSON.stringify(data)))\r\n                    .catch(this.handleError);\r\n    }\r\n\r\n    saveEvent(event: IEvent): Observable<IEvent> {\r\n        let headers = new Headers({'Content-Type': 'application/json'});\r\n        let options = new RequestOptions({headers: headers});\r\n\r\n        if (event.id === 0) {\r\n            return this.createEvent(event, options);\r\n        }\r\n        return this.updateEvent(event, options);\r\n    }\r\n\r\n    private createEvent(event: IEvent, options: RequestOptions): Observable<IEvent> {\r\n        event.id = undefined;\r\n        return this.http.post(this.baseUrl, event, options)\r\n                .map(this.extractData)\r\n                .do(data => console.log('createEvent: ' + JSON.stringify(data)))\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    private updateEvent(event: IEvent, options: RequestOptions): Observable<IEvent> {\r\n        const url = `${this.baseUrl}/${event.id}`;\r\n        return this.http.put(url, event, options)\r\n                .map(() => event)\r\n                .do(data => console.log('updateEvent: ' + JSON.stringify(data)))\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    private extractData(response: Response) {\r\n        let body = response.json();\r\n        return body.data || {};\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || 'Server error');\r\n    }\r\n\r\n    initializeEvent(): IEvent {\r\n        return {\r\n            id: 0,\r\n            eventName: null,\r\n            eventType: null\r\n        };\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/events/service-eventdata.service.ts","import { Injectable } from '@angular/core';\r\nimport { tokenNotExpired } from 'angular2-jwt';\r\n\r\n// Avoid name not cound warnings\r\ndeclare var Auth0Lock: any;\r\n\r\n@Injectable()\r\nexport class ServiceAuth {\r\n    //Configure Auth0\r\n    lock = new Auth0Lock( 'gpoaLFY92U66mGgAllObNrU2TBye19Dw', 'fdagher1.auth0.com', {\r\n        theme: { \r\n            primaryColor: \"#31324F\",\r\n            logo: \"favicon.png\"\r\n        },\r\n        languageDictionary: {\r\n            title: \"Event Recorder\"\r\n        }\r\n    });\r\n\r\n    //Profile object for auth class\r\n    userProfile: Object;\r\n\r\n    constructor() {\r\n        //Set userProfile attribute of already saved Profile\r\n        this.userProfile = JSON.parse(localStorage.getItem('profile'));\r\n        \r\n        // Add callback for the Lock `authenticated` event\r\n        this.lock.on('authenticated', (authResult) => { \r\n            localStorage.setItem('id_token', authResult.idToken);\r\n\r\n            //Fetch profile information\r\n            this.lock.getProfile(authResult.idToken, (error, profile) => {\r\n                if (error) {\r\n                    alert(error);\r\n                    return;\r\n                }\r\n\r\n                localStorage.setItem('profile', JSON.stringify(profile));\r\n                this.userProfile = profile;\r\n            });\r\n        });\r\n    }\r\n    \r\n    public login() {\r\n        this.lock.show();\r\n    }\r\n\r\n    public logout() {\r\n        localStorage.removeItem('id_token');\r\n        localStorage.removeItem('profile');\r\n        this.userProfile = undefined;\r\n    }\r\n\r\n    public authenticated(){\r\n        return tokenNotExpired();\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/service-auth.service.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 418;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 418\n// module chunks = 1","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component } from '@angular/core';\n\nimport { ServiceAuth } from './service-auth.service';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div class='container'>\n        \n        <div class='panel panel-primary'>\n        \n            <div class='panel-heading' style=\"overflow: hidden;\">\n                <a [routerLink]=\"['']\" style=\"color:white;text-decoration:none;float: left;\">\n                    {{pageTitle}}\n                </a>\n                <button class=\"btn btn-primary btn-margin\" style=\"float: right;\" (click)=\"serviceauth.login()\" *ngIf=\"!serviceauth.authenticated()\">Log In</button>\n                <button class=\"btn btn-primary btn-margin\" style=\"float: right;\" (click)=\"serviceauth.logout()\" *ngIf=\"serviceauth.authenticated() && serviceauth.userProfile\">Log Out {{serviceauth.userProfile.nickname}}</button>\n                <button class=\"btn btn-primary btn-margin\" style=\"float: right;\" (click)=\"serviceauth.logout()\" *ngIf=\"serviceauth.authenticated() && !serviceauth.userProfile\">Log Out </button>\n            </div>\n            \n            <div >\n                <router-outlet></router-outlet>\n            </div>                           \n            \n        </div>\n    </div>\n  ` \n})\nexport class AppComponent  { \n  pageTitle: string = 'Event Recorder'; \n\n  constructor (private serviceauth: ServiceAuth) {\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","// Angular Modules\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\n\n// App Components, filters, services and models\nimport { AppComponent }  from './app.component';\nimport { ServiceAuth } from './service-auth.service';\n\n// Modules\nimport { EventModule } from './events/event.module';\n\n@NgModule({\n  imports:      [ \n    BrowserModule,\n    RouterModule.forRoot([\n    ]),\n    EventModule\n  ],\n  declarations: [ \n    AppComponent\n  ],\n  bootstrap:    [ \n    AppComponent \n  ],\n  providers: [\n    ServiceAuth\n  ]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { InMemoryDbService } from 'angular-in-memory-web-api';\r\n\r\nimport { IEvent } from './event';\r\n\r\nexport class DataEvent implements InMemoryDbService {\r\n\r\n    createDb() {\r\n        let events: IEvent[] = [\r\n            {\r\n                'id': 1,\r\n                'eventName': 'Yanni Concert',\r\n                'eventType': 'Show'\r\n            },\r\n            {\r\n                'id': 2,\r\n                'eventName': 'Ski at Liberty M',\r\n                'eventType': 'Sports'\r\n            },\r\n            {\r\n                'id': 3,\r\n                'eventName': 'Steakhouse',\r\n                'eventType': 'Restaurant'\r\n            }\r\n        ];\r\n        return { events };\r\n    }\r\n}\r\n\r\n        \n\n\n// WEBPACK FOOTER //\n// ./src/app/events/data-event.ts","// Angular Modules\r\nimport { NgModule } from \"@angular/core\";\r\nimport { RouterModule } from '@angular/router';\r\n\r\n// Angular modules for loading & configuring the in-memory web api and Angular JWT\r\nimport { InMemoryWebApiModule } from 'angular-in-memory-web-api';\r\n\r\n//Event module's Components, Filters, Services and Modules \r\nimport { DataEvent }  from './data-event';\r\nimport { EventListComponent } from './eventlist.component';\r\nimport { ServiceEventData } from './service-eventdata.service';\r\nimport { PipeEventFilter } from './pipe-eventfilter.pipe';\r\nimport { EventDetailComponent } from './eventdetail.component';\r\nimport { EventEditComponent } from './eventedit.component'\r\n\r\n//Modules\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule ({\r\n    imports: [\r\n        SharedModule,\r\n        RouterModule.forChild([\r\n            {path: '', component: EventEditComponent },\r\n            {path: 'eventlist', component: EventListComponent},\r\n            {path: 'eventdetail/:id', component: EventDetailComponent},\r\n            {path: 'eventedit/:id', component: EventEditComponent},\r\n            {path: '**', component: EventListComponent }\r\n        ]),\r\n        InMemoryWebApiModule.forRoot(DataEvent)\r\n    ],\r\n    declarations: [       \r\n        EventListComponent,\r\n        PipeEventFilter,\r\n        EventDetailComponent,\r\n        EventEditComponent\r\n    ],\r\n    providers: [\r\n        ServiceEventData\r\n    ]\r\n})\r\nexport class EventModule {\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/events/event.module.ts","export interface IEvent {\r\n    id: number;\r\n    eventName: string;\r\n    eventType: string;\r\n}\r\n\r\nexport const eventTypes: string[] = [\"Activity\", \"Concert/Play\", \"Conference\", \"Hotel\", \"Museum\", \"Restaurant\", \"Site\", \"Tour\", \"Visit\", \"Work Trip\"];\n\n\n// WEBPACK FOOTER //\n// ./src/app/events/event.ts","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\nimport { IEvent } from './event';\r\nimport { ServiceEventData } from './service-eventdata.service';\r\n\r\n@Component({\r\n    templateUrl: './eventdetail.component.html'\r\n})\r\nexport class EventDetailComponent implements OnInit, OnDestroy {\r\n    //Event model\r\n    event: IEvent;\r\n    \r\n    //Used to display any errors occured in retriveing event data\r\n    errorMessage: string;\r\n    \r\n    //Used for subscribing to changes in ID passed in URL \r\n    private sub: Subscription;\r\n\r\n    constructor ( private route: ActivatedRoute,\r\n                    private router: Router,\r\n                    private serviceeventData: ServiceEventData) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.sub = this.route.params.subscribe(\r\n            params => {\r\n                let id = +params['id'];\r\n                this.getEvent(id);\r\n            }\r\n        );\r\n    }  \r\n\r\n    ngOnDestroy() {\r\n            this.sub.unsubscribe();\r\n    }\r\n\r\n    getEvent(id: number) {\r\n        this.serviceeventData.getEvent(id).subscribe(\r\n            event => this.event = event,\r\n            error => this.errorMessage = <any>error);\r\n    } \r\n\r\n    onBack(): void {\r\n        this.router.navigate(['/eventlist']);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/events/eventdetail.component.ts","import { Component, OnInit, AfterViewInit, OnDestroy, ViewChildren, ElementRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators, FormControlName } from '@angular/forms';\r\nimport { ActivatedRoute, Router  } from '@angular/router';\r\n\r\n/*import 'rxjs/add/operator/debounceTime';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/observable/merge';\r\nimport { Observable } from 'rxjs/Observable';*/\r\n\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\nimport { NumberValidators } from '../shared/number.validator';\r\nimport { GenericValidator } from '../shared/generic-validator';\r\n\r\nimport { IEvent } from './event';\r\nimport { eventTypes } from './event';\r\nimport { ServiceEventData } from './service-eventdata.service';\r\n\r\n@Component ({\r\n    templateUrl: './eventedit.component.html'\r\n})\r\nexport class EventEditComponent implements OnInit {\r\n    //@ViewChildren(FormControlName, {read: ElementRef }) formInputElements: ElementRef[];\r\n    \r\n    //Variables used for validators\r\n    displayMessage: { [key: string]: string } = {};\r\n    private validationMessages: { [key: string]: { [key: string]: string } };\r\n    private genericValidator: GenericValidator;\r\n\r\n    //Variables used if an error occurs getting or updating events through the event service\r\n    errorMessage: string;\r\n\r\n    //Used for displaying successful entering of random event\r\n    statusMessage: string;\r\n\r\n    //Used to check if the eventedit view is for a new event or edit event\r\n    eventIdFromRouter: number;\r\n\r\n    //Variable used to create the form and bind to data \r\n    eventForm: FormGroup;\r\n    event: IEvent;\r\n    eventTypes = eventTypes;\r\n\r\n    //Variable used to subscribe to changes in ID value in URL\r\n    private sub: Subscription;\r\n\r\n    constructor(private fb: FormBuilder,\r\n                private route: ActivatedRoute,\r\n                private router: Router,\r\n                private serviceeventData: ServiceEventData) {\r\n\r\n        this.validationMessages = {\r\n            eventName: {\r\n                required: 'Event name is required.',\r\n                minlength: 'Event name must be at least three characters',\r\n                maxlength: 'Event name cannot exceed 50 characters.'\r\n            },\r\n            eventType: {\r\n                required: 'Event name is required.'\r\n            }\r\n        };\r\n\r\n        this.genericValidator = new GenericValidator(this.validationMessages);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        //Create Reactive Form\r\n        this.eventForm = this.fb.group({\r\n            eventName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\r\n            eventType: ['', Validators.required]\r\n        });\r\n\r\n        //Get parameter passed through the URL and then call get event to populate sheet with event data\r\n        this.sub = this.route.params.subscribe(\r\n            params => {\r\n                let id = +params['id'];\r\n                if (isNaN(id))\r\n                { \r\n                    id = 0;\r\n                }\r\n                this.eventIdFromRouter = id;\r\n                this.getEvent(id);\r\n            }\r\n        );\r\n    }\r\n\r\n    //Unsubscribe when done editing the event data\r\n    ngOnDestroy(): void {\r\n        this.sub.unsubscribe();\r\n    }\r\n\r\n    /*ngAfterViewInit(): void {\r\n        // Watch for the blur event from any input element on the form.\r\n        let controlBlurs: Observable<any>[] = this.formInputElements\r\n            .map((formControl: ElementRef) => Observable.fromEvent(formControl.nativeElement, 'blur'));\r\n\r\n        // Merge the blur event observable with the valueChanges observable\r\n        Observable.merge(this.eventForm.valueChanges, ...controlBlurs).debounceTime(800).subscribe(value => {\r\n            this.displayMessage = this.genericValidator.processMessages(this.eventForm);\r\n        });\r\n    }*/\r\n\r\n    getEvent(id: number): void {\r\n        this.serviceeventData.getEvent(id)\r\n            .subscribe(\r\n                (event: IEvent) => this.onEventRetrieved(event),\r\n                (error: any) => this.errorMessage = <any>error\r\n            );\r\n    }\r\n\r\n    onEventRetrieved(event: IEvent): void {\r\n        if (this.eventForm) {\r\n            this.eventForm.reset();\r\n        }\r\n        this.event = event;\r\n\r\n        this.eventForm.patchValue({\r\n            eventName: this.event.eventName,\r\n            eventType: this.event.eventType\r\n        });\r\n    }\r\n\r\n    saveEvent(): void {\r\n        console.log(\"temp\");\r\n        if (this.eventForm.dirty && this.eventForm.valid) {\r\n            let e = Object.assign({}, this.event, this.eventForm.value);\r\n            \r\n            this.serviceeventData.saveEvent(e)\r\n                .subscribe(\r\n                    () => this.onSaveComplete(),\r\n                    (error: any) => this.errorMessage = <any>error\r\n                );\r\n        } else if (!this.eventForm.dirty) {\r\n            this.onSaveComplete();\r\n        }\r\n    }\r\n\r\n    generateRandomEvent(): void {\r\n        //once working, change var to type\r\n        let gEvent: IEvent = {id: 0, eventName: \"Event Name\", eventType: \"Activity\"};\r\n        this.onEventRetrieved(gEvent);\r\n\r\n        //this.ngOnInit();\r\n    }\r\n\r\n    onSaveComplete(): void {\r\n        console.log(\"save\");\r\n        this.statusMessage = \"Added\";\r\n        Observable.timer(1000).subscribe( x => this.statusMessage = \"\");\r\n        this.eventForm.reset();\r\n        this.router.navigate(['']);\r\n    }\r\n\r\n    gotoEventList(): void {\r\n        this.router.navigate(['/eventlist']);\r\n    }\r\n\r\n    deleteEvent(): void {\r\n        if (this.event.id === 0) {\r\n            this.onSaveComplete();\r\n        } else {\r\n            if (confirm(`Really delete the event: ${this.event.eventName}?`)) {\r\n                this.serviceeventData.deleteEvent(this.event.id)\r\n                .subscribe(\r\n                    () => this.onSaveComplete(),\r\n                    (error: any) => this.errorMessage = <any>error\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    OptionClicked(newValue): void {\r\n        console.log(newValue);\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/events/eventedit.component.ts","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { IEvent } from './event';\r\nimport { ServiceEventData } from './service-eventdata.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n    templateUrl: './eventlist.component.html'\r\n})\r\nexport class EventListComponent implements OnInit {\r\n    //Used as placeholder for the filter \r\n    listFilter: string;\r\n\r\n    //Used for displaying any errors occured when retrieving event data\r\n    errorMessage: string;\r\n\r\n    //This is the event model \r\n    events: IEvent[];\r\n\r\n    constructor (private serviceeventData : ServiceEventData,\r\n                    private router: Router) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.serviceeventData.getEvents()\r\n            .subscribe(events => this.events = events, \r\n            error => this.errorMessage = <any>error);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/events/eventlist.component.ts","import { PipeTransform, Pipe } from '@angular/core';\r\nimport { IEvent } from './event';\r\n\r\n@Pipe({\r\n    name: 'pipeeventFilter'\r\n})\r\nexport class PipeEventFilter implements PipeTransform {\r\n    transform(value: IEvent[], filterBy: string): IEvent[] {\r\n        filterBy = filterBy ? filterBy.toLocaleLowerCase() : null;\r\n        return filterBy ? value.filter((product: IEvent) =>\r\n            product.eventName.toLocaleLowerCase().indexOf(filterBy) !== -1) : value;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/events/pipe-eventfilter.pipe.ts","import { FormGroup } from '@angular/forms';\n\n// Generic validator for Reactive forms\n// Implemented as a class, not a service, so it can retain state for multiple forms.\nexport class GenericValidator {\n\n    // Provide the set of valid validation messages\n    // Stucture:\n    // controlName1: {\n    //     validationRuleName1: 'Validation Message.',\n    //     validationRuleName2: 'Validation Message.'\n    // },\n    // controlName2: {\n    //     validationRuleName1: 'Validation Message.',\n    //     validationRuleName2: 'Validation Message.'\n    // }\n    constructor(private validationMessages: { [key: string]: { [key: string]: string } }) {\n\n    }\n\n    // Processes each control within a FormGroup\n    // And returns a set of validation messages to display\n    // Structure\n    // controlName1: 'Validation Message.',\n    // controlName2: 'Validation Message.'\n    processMessages(container: FormGroup): { [key: string]: string } {\n        let messages = {};\n        for (let controlKey in container.controls) {\n            if (container.controls.hasOwnProperty(controlKey)) {\n                let c = container.controls[controlKey];\n                // If it is a FormGroup, process its child controls.\n                if (c instanceof FormGroup) {\n                    let childMessages = this.processMessages(c);\n                    Object.assign(messages, childMessages);\n                } else {\n                    // Only validate if there are validation messages for the control\n                    if (this.validationMessages[controlKey]) {\n                        messages[controlKey] = '';\n                        if ((c.dirty || c.touched) && c.errors) {\n                            Object.keys(c.errors).map(messageKey => {\n                                if (this.validationMessages[controlKey][messageKey]) {\n                                    messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return messages;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/generic-validator.ts","// Angular Modules\r\nimport { NgModule }  from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\n\r\n@NgModule({\r\n  imports: [ \r\n    CommonModule,\r\n    HttpModule\r\n    ],\r\n  exports : [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  declarations: [ ],\r\n})\r\nexport class SharedModule { }\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/shared.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","module.exports = \"<div class='panel-body' *ngIf='event'>\\r\\n    <div class='table-responsive'>\\r\\n        <table class='table'>\\r\\n            <tbody>\\r\\n                <tr></tr>\\r\\n                <tr>Event Name: {{event.eventName}}</tr>\\r\\n                <tr>Event Type: {{event.eventType}}</tr>\\r\\n            </tbody>\\r\\n        </table>   \\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div class='panel-footer'>\\r\\n        <button class=\\\"btn btn-default\\\" [routerLink]=\\\"['/eventlist']\\\" style=\\\"width:80px\\\">\\r\\n            Back\\r\\n        </button>\\r\\n        <a class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/eventedit', event.id]\\\" style=\\\"width:80px;margin-left:10px\\\">\\r\\n            Edit\\r\\n        </a>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/events/eventdetail.component.html\n// module id = 618\n// module chunks = 1","module.exports = \"<div class=\\\"panel-body\\\">\\r\\n    <form class=\\\"form-horizontal\\\"\\r\\n          novalidate\\r\\n          (ngSubmit)=\\\"saveEvent()\\\"\\r\\n          [formGroup]=\\\"eventForm\\\">\\r\\n        <fieldset>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <div class=\\\"col-md-4 col-md-offset-2\\\">\\r\\n                    <span>\\r\\n                        <button class=\\\"btn btn-primary\\\"\\r\\n                                type=\\\"submit\\\"\\r\\n                                style=\\\"width:80px;margin-right:10px\\\"\\r\\n                                [disabled]='!eventForm.valid'>\\r\\n                            Save\\r\\n                        </button>\\r\\n                    </span>\\r\\n                     <span *ngIf=\\\"eventIdFromRouter > 0\\\">\\r\\n                        <a class=\\\"btn btn-default\\\"\\r\\n                            style=\\\"width:80px\\\"\\r\\n                            (click)=\\\"deleteEvent()\\\">\\r\\n                            Delete\\r\\n                        </a>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <a class=\\\"btn btn-default\\\"\\r\\n                            style=\\\"width:80px\\\"\\r\\n                            (click)=\\\"gotoEventList()\\\">\\r\\n                            EventList\\r\\n                        </a>\\r\\n                    </span>\\r\\n                    <span *ngIf=\\\"eventIdFromRouter === 0\\\">\\r\\n                        <a class=\\\"btn btn-default\\\"\\r\\n                            style=\\\"width:80px\\\"\\r\\n                            (click)=\\\"generateRandomEvent()\\\">\\r\\n                            Generate\\r\\n                        </a>\\r\\n                    </span>\\r\\n                    <span class='has-error' *ngIf='statusMessage'>\\r\\n                        {{statusMessage}}\\r\\n                    </span>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\"\\r\\n                 [ngClass]=\\\"{'has-error': displayMessage.eventName }\\\">\\r\\n                 <label class=\\\"col-md-2 control-label\\\" for=\\\"eventNameId\\\">\\r\\n                     Event Name\\r\\n                 </label>\\r\\n\\r\\n                 <div class=\\\"col-md-8\\\">\\r\\n                     <input class=\\\"form-control\\\"\\r\\n                            type=\\\"text\\\"\\r\\n                            placeholder=\\\"Name (required)\\\"\\r\\n                            formControlName=\\\"eventName\\\" />\\r\\n                     <span class=\\\"help-block\\\" *ngIf=\\\"displayMessage.eventName\\\">\\r\\n                         {{displayMessage.eventName}}\\r\\n                     </span>\\r\\n                 </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\"\\r\\n                 [ngClass]=\\\"{'has-error': displayMessage.eventType }\\\">\\r\\n                 <label class=\\\"col-md-2 control-label\\\" for=\\\"eventTypeId\\\">\\r\\n                     Event Type\\r\\n                 </label>\\r\\n        \\r\\n                 <div class=\\\"col-md-8\\\">\\r\\n                        <select class=\\\"form-control\\\" \\r\\n                                formControlName=\\\"eventType\\\">\\r\\n                            <option *ngFor=\\\"let eventType of eventTypes\\\" [value]=\\\"eventType\\\">\\r\\n                                {{eventType}}\\r\\n                            </option>\\r\\n                        </select>\\r\\n                     <span class=\\\"help-block\\\" *ngIf=\\\"displayMessage.eventType\\\">\\r\\n                         {{displayMessage.eventType}}\\r\\n                     </span>\\r\\n                 </div>\\r\\n            </div>\\r\\n\\r\\n        </fieldset>\\r\\n    </form>\\r\\n    <div class=\\\"has-error\\\" *ngIf=\\\"errorMessage\\\">{{errorMessage}}</div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/events/eventedit.component.html\n// module id = 619\n// module chunks = 1","module.exports = \"\\r\\n<div class='panel-body'>\\r\\n    <div class='row' style=\\\"margin-bottom:4px\\\">\\r\\n        <div class='col-md-4'>\\r\\n            <input type='text' placeholder='Filter by' [(ngModel)]='listFilter' />\\r\\n            <button class=\\\"btn btn-primary\\\" [routerLink]=\\\"['/eventedit', 0]\\\">\\r\\n                New\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class='has-error' *ngIf='errorMessage'>\\r\\n        {{errorMessage}}\\r\\n    </div>\\r\\n\\r\\n    <div class='table-responsive'>\\r\\n        <table class='table' *ngIf='events && events.length'>\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th>Event Name</th>\\r\\n                    <th>Event Description</th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr *ngFor='let event of events | pipeeventFilter:listFilter'>\\r\\n                    <td><a [routerLink]=\\\"['/eventdetail', event.id]\\\">{{event.eventName}}</a></td>\\r\\n                    <td>{{event.eventType}}</td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>   \\r\\n    </div>\\r\\n\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/events/eventlist.component.html\n// module id = 620\n// module chunks = 1"],"sourceRoot":""}